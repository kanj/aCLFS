#!/bin/sh
set -e
# Version 2013-03-26
#   Update redirect for patch download from > to >>
#   Moved BOOK_ARCH to build.config
#   Updated initDU to address case when ${CLFS} not yet created.
#   Added makeReport
#   Removed final shellScript
#   Update BOOK_ARCH to PLATFORM and gitBOOK to BOOK to be consistent with JHALFS

# Version   2013-03-25
#   Outputs are saved to log files in ${CLFS}/sources/clfs
#   Key stats are save to log file - start/stop times, disk usage at key points
#   OOM moved to arch specific folder
#   Patch download integrated into package download
#   Progress indicator reformatted
#   Some commands "silenced", e.g. cd -.

aFormat="%-5s %-12s %-37s %-6s %-38s %-10s %-8s \n"

doPrep () {

source $PWD/aCLFS.config

source $PWD/build.config

[ -d gitBOOK/$BOOK ] || git clone $REPO gitBOOK/$BOOK

cd gitBOOK/$BOOK
git pull
cd - > /dev/null

[ -d gitBOOK/$BOOK/render/html/${PLATFORM} ] || renderBook


[ -d /home/clfs ] && ( [ -f ${CLFS}/sources/clfs/final-preps/settingenvironment.html ]  || rm -f /home/clfs/.bashrc )

}

renderBook () {

echo "im rendering"

cd gitBOOK/$BOOK/BOOK

make

cd -  > /dev/null

}


doDownload () {

 

      pkg=${pkgUrl##*/}

      echo "Preparing "$base

      [ -f $SRC_ARCHIVE/$pkg ] || wget -P $SRC_ARCHIVE  $pkgUrl

 

      tarType=${pkgUrl##*.}

      pkgFolder=${pkg%%.tar*}

      buildFolder=$( echo -n $pkgFolder | cut -d- -f1 )"-build"

      case $tarType in

            bz2) tar -xjf $SRC_ARCHIVE/$pkg -C ${CLFS}/sources/  ;;

            tar) tar -xvf $SRC_ARCHIVE/$pkg -C ${CLFS}/sources/  ;;

            gz)   tar -xzf $SRC_ARCHIVE/$pkg -C ${CLFS}/sources/  ;;
            
            xz) tar -Jxf $SRC_ARCHIVE/$pkg -C ${CLFS}/sources/  ;;

            *)    echo "Unrecognized archive format " && exit 1   ;;

      esac
   
   base=$( echo -n $base | sed s#'${CLFS}'#${CLFS}#g )
   chown -R clfs ${base}
   [ -z $patchUrl ] || wget -P ${CLFS}/sources $patchUrl > /dev/null 2>>log
   [ -z $patchUrl ] || chown -R clfs  ${CLFS}/sources/*.patch 

}


makeScript () {

echo "#!/bin/sh" > shellScript
echo "source $PWD/build.config" >> shellScript
echo '[ -f ~/.bashrc ] && source ~/.bashrc' >> shellScript
echo "pushd $PWD" >> shellScript
echo "cd $base " >> shellScript

cat $scriptDir/$rootPage | hxselect kbd -c -s '\n' >> shellScript  # scrape commands from page
echo ' [ $? = 0 ] && touch ${CLFS}/sources/clfs/'$rootPage >> shellScript
echo "popd " >> shellScript

# The following helps to clean up some html oddities

sed -i s#/mnt/clfs#${CLFS}#g shellScript
sed -i 's/<[^>]\+>/ /g' shellScript
sed -i s#"&lt;"#"<"#g shellScript
sed -i s#"&gt;"#">"#g shellScript

chmod 777 shellScript

}

doCleanUp () {

    rm -r ${base}

    for aPatch in `ls ${CLFS}/sources/ | grep -e "patch" `
    do
        rm ${CLFS}/sources/$aPatch
    done

    for aBuildDir in `ls ${CLFS}/sources/ | grep -e "-build" `
    do
        rm -r  ${CLFS}/sources/$aBuildDir
    done        
    


}

makeReport () {

rm shellScript

SBU=$(( $( grep -e "finalTime" ${CLFS}/sources/clfs/cross-tools/binutils.log | cut -d= -f2 ) - \
        $( grep -e "initTime" ${CLFS}/sources/clfs/cross-tools/binutils.log | cut -d= -f2 ) ))



echo "The contents of the aCLFS.config file was "
cat aCLFS.config

echo "The contents of the build.config file was:"
cat build.config

printf "%30s %5s %5s %5s %5s %5s  \n" "Page"  "Initial DU (kb)" "Build DU (kb)" "Final DU (kb)" "elapsedTime (s)"  "elaspsed Time (SBU)"

aFormat="%-35s  %9d %9d %9d %9d %3d \n"

for  pageEntry in $( cat localBOOK/$BOOK/${PLATFORM}/OOM )
do
    
    
    rootPage=$( echo -n $pageEntry | cut -d'#' -f1 )

    
    log=$( echo -n $rootPage | sed s#html#log#g )   
    
    initDU=$( grep -e "initDU" ${CLFS}/sources/clfs/$log | cut -d= -f2 )
    
    initTime=$( grep -e "initTime" ${CLFS}/sources/clfs/$log | cut -d= -f2 )
    
    maxDU=$( grep -e "maxDU" ${CLFS}/sources/clfs/$log | cut -d= -f2 )
    
      
    buildDU=$(( maxDU - initDU))
    
    finalDU=$( grep -e "finalDU" ${CLFS}/sources/clfs/$log | cut -d= -f2 )
    
    finalTime=$( grep -e "finalTime" ${CLFS}/sources/clfs/$log | cut -d= -f2 )
    
    elapsedTime=$(( $finalTime - $initTime ))
    
    buildSBU=$(( $elapsedTime / $SBU ))
    
    printf "$aFormat"  $rootPage $initDU $buildDU $finalDU $elapsedTime $buildSBU 
      
done 

mv summary ${CLFS}/sources/clfs



}

doPrep

#OOM=Order of March. This file contains page url, which user executes, what directory to start from, and 
# the url for the source package to download
#Variations of while read pageEntry do not work. uClibc requires manual entry. These entries finish
# reading the file 


for  pageEntry in $( cat localBOOK/$BOOK/${PLATFORM}/OOM )
do
    
    
    rootPage=$( echo -n $pageEntry | cut -d'#' -f1 )

    user=$( echo -n $pageEntry | cut -d'#' -f2 )

    base=$( echo -n $pageEntry | cut -d'#' -f3 )
    
    pkgUrl=$( echo -n $pageEntry | cut -d'#' -f4 )
    
    patchUrl=$( echo -n $pageEntry | cut -d'#' -f5 )
    
    log=$( echo -n $rootPage | sed s#html#log#g )   
    
    
    [ -f ${CLFS}/sources/clfs/$rootPage ] && continue
    
    initDU=$( du -ks ${CLFS} 2>/dev/null | cut -f1 ) 
    
    [ "$initDU" = "" ] && initDU=0
    
    echo "initDU="$initDU > log
    
    [ -z $pkgUrl ] || doDownload
    
    echo "initTime="`date +%s` >> log
    
   #Select which directory to pull page from.
   scriptDir=gitBOOK/$BOOK/render/html/${PLATFORM}/
   myBOOK=git         
   [  -e localBOOK/$BOOK/${PLATFORM}/$rootPage ] && scriptDir=localBOOK/$BOOK/${PLATFORM}/
   [  -e localBOOK/$BOOK/${PLATFORM}/$rootPage ] && myBOOK=local                  
   makeScript
   
   
   
   
   printf "$aFormat" $user "is executing" $rootPage "from" $base "using" $myBOOK 
   su -c $PWD/shellScript -s /bin/bash ${user} >> log 2>&1
        
   
    
    maxDU=$( du -ks ${CLFS} | cut -f1 )  
    echo "maxDU="$maxDU >> log
    echo "finalTime="`date +%s` >> log
    
    [ -z $pkgUrl ] || doCleanUp
    
    
    finalDU=$( du -ks ${CLFS} | cut -f1 )  
    echo "finalDU="$finalDU >> log
    mv log  ${CLFS}/sources/clfs/$log
    [ -f ${CLFS}/sources/clfs/$rootPage ] || break
      
done 

( [ -e ${CLFS}/sources/clfs/$rootPage ] && echo "Congratulations system build complete " ) || echo "Abnormal Termination"

makeReport > summary
